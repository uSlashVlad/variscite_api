openapi: 3.0.0
info:
  title: Variscite API
  description: RESTful API of Variscite, online geoservice
  version: 0.1.0
  license:
    name: MIT

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    GroupInfo:
      properties:
        id:
          type: string
          format: uuid
          example: 9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d
        name:
          type: string
          example: Good friends
        inviteCode:
          type: string
          example: O92UAMEsSXsSs1X
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserInfo'
      required:
        - group
        - name
        - inviteCode
    UserInfo:
      properties:
        id:
          type: string
          format: uuid
          example: 9375ecb7-e61d-43f0-8775-960fb29250a5
        name:
          type: string
          example: Vlad
        isAdmin:
          type: boolean
          example: true
    GroupCreationInput:
      properties:
        name:
          type: string
          example: Good friends
        passcode:
          type: string
          example: qwerty
      required:
        - name
        - passcode
    GroupAuthOutput:
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJnIjoiOWIxZGViNGQtM2I3ZC00YmFkLTliZGQtMmIwZDdiM2RjYjZkIiwidSI6IjkzNzVlY2I3LWU2MWQtNDNmMC04Nzc1LTk2MGZiMjkyNTBhNSIsImEiOnRydWV9.SPDgdkLjBwfN1qP-8NLXfw9zR9Jdzmenbi5vJMLLeJQ
      required:
        - token
    GroupAuthInput:
      properties:
        name:
          type: string
          example: Vlad Nagorny
        passcode:
          type: string
          example: qwerty
      required:
        - name
    GeoStruct:
      description: Custom GeoJSON object
      required:
        - id
        - user
        - struct
      properties:
        id:
          type: string
          format: uuid
          example: 119da408-8ca9-42ae-bfaf-e80557aaaeee
        type:
          type: string
          description: Type of geo structure, can be ommited since here is only GeoJSON
          default: geojson
        user:
          type: string
          format: uuid
          description: ID of user that created this structure on server, shouldn't be used by the client because server automaticaly use ID from user token
          example: 9375ecb7-e61d-43f0-8775-960fb29250a5
        struct:
          $ref: '#/components/schemas/GeoJSON'
    GeoJSON:
      type: object
      example: {
        "type": "FeatureCollection",
        "features": [
          {
            "type": "Feature",
            "properties": {},
            "geometry": {
              "type": "Point",
              "coordinates": [
                37.48055577278137,
                55.67000977195004
              ]
            }
          }
        ]
      }
    Status:
      properties:
        text:
          type: string
          example: OK!
    JWT:
      properties:
        g:
          type: string
          format: uuid
          description: Group id
          example: 9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d
        u:
          type: string
          format: uuid
          description: User id
          example: 9375ecb7-e61d-43f0-8775-960fb29250a5
        a:
          type: boolean
          description: Indicator of user previlegies
          example: true
      required:
        - g
        - u
    InputValidationError:
      properties:
        errorText:
          type: string
          default: Input validation error
        url:
          type: string
        moreInfo:
          type: array
          items:
            properties:
              keyword:
                type: string
                default: required
              dataPath:
                type: string
              schemaPath:
                type: string
                default: '#/required'
              params:
                type: object
                example: {"missingProperty":"name"}
              message:
                type: string
                example: should have required property 'name'
    InternalServerError:
      properties:
        errorText:
          type: string
        url:
          type: string

servers:
  - url: http://localhost:8000

security:
  - bearerAuth: []

paths:
  /groups:
    post:
      security: []
      summary: Creates new group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreationInput'
      responses:
        '200':
          description: If group creation is successfull, it returns group and user id and JWT
          content:
            application/json:
              schema:
                properties:
                  inviteCode:
                    type: string
                    example: O92UAMEsSXsSs1X
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputValidationError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /groups/{inviteCode}:
    parameters:
      - name: inviteCode
        in: path
        description: Invite code of group that was generated by server during group creation
        required: true
        schema:
          type: string
          example: O92UAMEsSXsSs1X
    post:
      security: []
      summary: Auth using invite code
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupAuthInput'
      responses:
        '200':
          description: If invite code is correct, it returns group and user id and JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupAuthOutput'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputValidationError'
        '401':
          description: Passcode was sended, but it is incorrect
          content:
            application/json:
              schema:
                properties:
                  errorText:
                    type: string
                    default: Invalid passcode
                  url:
                    type: string
                    example: /groups/O92UAMEsSXsSs1X
        '404':
          description: No group has such invite code
          content:
            application/json:
              schema:
                properties:
                  errorText:
                    type: string
                    default: No such group found
                  url:
                    type: string
                    example: /groups/O92UAMEsSXsSs1X
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /groups/my:
    get:
      summary: Get current group info
      responses:
        '200':
          description: If auth is successfull, it returns group data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupInfo'
        '401':
          description: If no token specified or token is incorrect
          content:
            application/json:
              schema:
                properties:
                  errorText:
                    type: string
                    default: Invalid token
                  url:
                    type: string
                    default: /groups/my
        '404':
          description: Token refers on group that doesn't already exists
          content:
            application/json:
              schema:
                properties:
                  errorText:
                    type: string
                    default: No such group found or user was kicked
                  url:
                    type: string
                    default: /groups/my
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    delete:
      summary: Delete current group
      responses:
        '200':
          description: If auth is successfull, it returns group data
          content:
            application/json:
              schema:
                default: {}
        '401':
          description: If no token specified or token is incorrect
          content:
            application/json:
              schema:
                properties:
                  errorText:
                    type: string
                    default: Invalid token
                  url:
                    type: string
                    default: /groups/my
        '403':
          description: Token is ok, but user is not group admin
          content:
            application/json:
              schema:
                properties:
                  errorText:
                    type: string
                    default: Insufficient permissions
                  url:
                    type: string
                    default: /groups/my
        '404':
          description: Token refers on group that doesn't already exists
          content:
            application/json:
              schema:
                properties:
                  errorText:
                    type: string
                    default: No such group found or user was kicked
                  url:
                    type: string
                    default: /groups/my
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  # /structures:
  #   get:
  #     summary: Get all structures
  #     responses:
  #       '200':
  #         description: Returns list of all structures in group
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/GeoStruct'
  #   post:
  #     summary: Post new structure to group
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/GeoJSON'
  #     responses:
  #       '200':
  #         description: Returns created structure
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/GeoStruct'
  # /structures/{id}:
  #   parameters:
  #     - name: id
  #       in: path
  #       description: ID of structure that should be edited
  #       required: true
  #       schema:
  #         type: string
  #         format: uuid
  #         example: 119da408-8ca9-42ae-bfaf-e80557aaaeee
  #   put:
  #     summary: Edit already created structure
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/GeoJSON'
  #     responses:
  #       '200':
  #         description: Returns list of all structures in group
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/GeoStruct'
  /status:
    get:
      security: []
      summary: Checks server status and returns it
      responses:
        '200':
          description: Just "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
