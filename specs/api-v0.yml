openapi: 3.0.0
info:
  title: Variscite API
  description: RESTful API of Variscite, online geoservice
  version: 0.3.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  contact:
    name: Vladislav Nagorny
    email: u.slash.vlad@gmail.com

servers:
  - url: http://localhost:8000
  - url: http://variscite.debils.tech:8000

security:
  - bearerAuth: []

# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
paths:
  /groups:
    post:
      security: []
      summary: Create new group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreationInput'
      responses:
        '200':
          description: Returns group and user id and JWT
          content:
            application/json:
              schema:
                properties:
                  inviteCode:
                    type: string
                    example: O92UAMEsSXsSs1X
        '400':
          $ref: '#/components/responses/Error400ValidationError'
        '500':
          $ref: '#/components/responses/Error500InternalServerError'
  /groups/{inviteCode}:
    parameters:
      - $ref: '#/components/parameters/InviteCode'
    post:
      security: []
      summary: Auth using invite code
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: Vlad Nagorny
                  maxLength: 30
                  minLength: 3
                passcode:
                  type: string
                  example: qwerty
                  minLength: 1
                  maxLength: 40
              required:
                - name
      responses:
        '200':
          description: Returns token for group auth
          content:
            application/json:
              schema:
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJnIjoiOWIxZGViNGQtM2I3ZC00YmFkLTliZGQtMmIwZDdiM2RjYjZkIiwidSI6IjkzNzVlY2I3LWU2MWQtNDNmMC04Nzc1LTk2MGZiMjkyNTBhNSIsImEiOnRydWV9.SPDgdkLjBwfN1qP-8NLXfw9zR9Jdzmenbi5vJMLLeJQ
                    minLength: 1
                required:
                  - token
        '400':
          $ref: '#/components/responses/Error400ValidationError'
        '401':
          $ref: '#/components/responses/Error401AuthError'
        '500':
          $ref: '#/components/responses/Error500InternalServerError'
  /groups/my:
    get:
      summary: Get current group info
      responses:
        '200':
          description: Returns your group data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupInfo'
        '401':
          $ref: '#/components/responses/Error401AuthError'
        '500':
          $ref: '#/components/responses/Error500InternalServerError'
    delete:
      summary: Delete current group
      responses:
        '200':
          description: Returns an empty object
          content:
            application/json:
              schema:
                default: {}
        '401':
          $ref: '#/components/responses/Error401AuthError'
        '403':
          $ref: '#/components/responses/Error403NoPermissionsError'
        '500':
          $ref: '#/components/responses/Error500InternalServerError'
  /groups/my/users:
    get:
      summary: Get current group' users list
      responses:
        '200':
          description: Returns list of all users in group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInfo'
        '401':
          $ref: '#/components/responses/Error401AuthError'
        '500':
          $ref: '#/components/responses/Error500InternalServerError'
  /groups/my/users/{userId}:
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      summary: Get user info
      responses:
        '200':
          description: Returns information about the desired user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          $ref: '#/components/responses/Error400ValidationError'
        '401':
          $ref: '#/components/responses/Error401AuthError'
        '404':
          $ref: '#/components/responses/Error404NotFoundGroupOrUser'
        '500':
          $ref: '#/components/responses/Error500InternalServerError'
    delete:
      summary: Kick user from group
      responses:
        '200':
          description: Returns an empty object
          content:
            application/json:
              schema:
                default: {}
        '401':
          $ref: '#/components/responses/Error401AuthError'
        '403':
          $ref: '#/components/responses/Error403NoPermissionsError'
        '404':
          $ref: '#/components/responses/Error404NotFoundGroupOrUser'
        '500':
          $ref: '#/components/responses/Error500InternalServerError'
  /groups/leave:
    post:
      summary: Leave current group
      responses:
        '200':
          description: Returns an empty object
          content:
            application/json:
              schema:
                default: {}
        '401':
          $ref: '#/components/responses/Error401AuthError'
        '404':
          $ref: '#/components/responses/Error404NotFoundGroupOrUser'
        '500':
          $ref: '#/components/responses/Error500InternalServerError'

  /structures:
    get:
      summary: Get all structures
      responses:
        '200':
          description: Returns list of all structures in group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GeoStruct'
        '401':
          $ref: '#/components/responses/Error401AuthError'
        '500':
          $ref: '#/components/responses/Error500InternalServerError'
    post:
      summary: Add new structure to group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeatureCollection'
      responses:
        '200':
          description: Returns created structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoStruct'
        '400':
          $ref: '#/components/responses/Error400ValidationError'
        '401':
          $ref: '#/components/responses/Error401AuthError'
        '500':
          $ref: '#/components/responses/Error500InternalServerError'
  /structures/{structId}:
    parameters:
      - $ref: '#/components/parameters/StructId'
    get:
      summary: Get detailed info about structures
      responses:
        '200':
          description: Returns information about the desired structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoStruct'
        '400':
          $ref: '#/components/responses/Error400ValidationError'
        '401':
          $ref: '#/components/responses/Error401AuthError'
        '404':
          $ref: '#/components/responses/Error404NotFoundStructure'
        '500':
          $ref: '#/components/responses/Error500InternalServerError'
    put:
      summary: Edit already created structure
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeatureCollection'
      responses:
        '200':
          description: Returns list of all structures in group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GeoStruct'
        '400':
          $ref: '#/components/responses/Error400ValidationError'
        '401':
          $ref: '#/components/responses/Error401AuthError'
        '403':
          $ref: '#/components/responses/Error403NoPermissionsError'
        '404':
          $ref: '#/components/responses/Error404NotFoundStructure'
        '500':
          $ref: '#/components/responses/Error500InternalServerError'
    delete:
      summary: Delete structure
      responses:
        '200':
          description: Deletes the desired structure
          content:
            application/json:
              schema:
                default: {}
        '400':
          $ref: '#/components/responses/Error400ValidationError'
        '401':
          $ref: '#/components/responses/Error401AuthError'
        '403':
          $ref: '#/components/responses/Error403NoPermissionsError'
        '404':
          $ref: '#/components/responses/Error404NotFoundStructure'
        '500':
          $ref: '#/components/responses/Error500InternalServerError'
  /structures/{structId}/fields:
    parameters:
      - $ref: '#/components/parameters/StructId'
    get:
      summary: Get object with all fields
      responses:
        '200':
          description: Returns object with all fields of structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructFields'
        '400':
          $ref: '#/components/responses/Error400ValidationError'
        '401':
          $ref: '#/components/responses/Error401AuthError'
        '403':
          $ref: '#/components/responses/Error403NoPermissionsError'
        '404':
          $ref: '#/components/responses/Error404NotFoundStructure'
        '500':
          $ref: '#/components/responses/Error500InternalServerError'
    post:
      summary: Add new or edit fields in structure
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructFields'
      responses:
        '200':
          description: Returns object with all fields of structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructFields'
        '400':
          $ref: '#/components/responses/Error400ValidationError'
        '401':
          $ref: '#/components/responses/Error401AuthError'
        '403':
          $ref: '#/components/responses/Error403NoPermissionsError'
        '404':
          $ref: '#/components/responses/Error404NotFoundStructure'
        '500':
          $ref: '#/components/responses/Error500InternalServerError'
    delete:
      summary: Delete specified /fields
      parameters:
        - name: fields
          in: query
          description: >
            Specify here all fields you want to delete, separate them with comma
          required: true
          schema:
            type: string
            example: checkWeather,hidden
      responses:
        '200':
          description: Returns an empty object
          content:
            application/json:
              schema:
                default: {}
        '400':
          $ref: '#/components/responses/Error400ValidationError'
        '401':
          $ref: '#/components/responses/Error401AuthError'
        '403':
          $ref: '#/components/responses/Error403NoPermissionsError'
        '404':
          $ref: '#/components/responses/Error404NotFoundStructure'
        '500':
          $ref: '#/components/responses/Error500InternalServerError'
  
  /location/all:
    get:
      summary: Get geolocation of all users in group
      responses:
        '200':
          description: >
            Returns geolocation of all users with visible geolocation in group
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserGeolocationOutput'
        '401':
          $ref: '#/components/responses/Error401AuthError'
        '500':
          $ref: '#/components/responses/Error500InternalServerError'
  /location/{userId}:
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      summary: Get geolocation of specific user
      responses:
        '200':
          description: Returns geolocation of specific user if it isn't hidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGeolocationOutput'
        '401':
          $ref: '#/components/responses/Error401AuthError'
        '404':
          $ref: '#/components/responses/Error404NotFoundGroupOrUser'
        '500':
          $ref: '#/components/responses/Error500InternalServerError'

  /location/my:
    put:
      summary: Update current user location
      requestBody:
        content:
          application/json:
            schema:
              required:
                - latitude
                - longitude
              properties:
                latitude:
                  type: number
                  default: 0
                longitude:
                  type: number
                  default: 0
      responses:
        '200':
          description: Returns geolocation object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGeolocationOutput'
        '400':
          $ref: '#/components/responses/Error400ValidationError'
        '401':
          $ref: '#/components/responses/Error401AuthError'
        '403':
          $ref: '#/components/responses/Error403NoPermissionsError'
        '500':
          $ref: '#/components/responses/Error500InternalServerError'
    delete:
      summary: Delete and hide current user location
      responses:
        '200':
          description: Returns an empty object
          content:
            application/json:
              schema:
                default: {}
        '400':
          $ref: '#/components/responses/Error400ValidationError'
        '401':
          $ref: '#/components/responses/Error401AuthError'
        '403':
          $ref: '#/components/responses/Error403NoPermissionsError'
        '500':
          $ref: '#/components/responses/Error500InternalServerError'


  /status:
    get:
      security: []
      summary: Check server status
      responses:
        '200':
          description: Just "OK"
          content:
            application/json:
              schema:
                properties:
                  text:
                    type: string
                    example: OK!
        '500':
          $ref: '#/components/responses/Error500InternalServerError'

# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    InviteCode:
      in: path
      name: inviteCode
      description: Invite code of group that was generated by server during group creation
      required: true
      schema:
        type: string
        example: O92UAMEsSXsSs1X
        minLength: 15
        maxLength: 15
    UserId:
      in: path
      name: userId
      description: User' UUID that creates during user login
      required: true
      schema:
        $ref: '#/components/schemas/UUID'
    StructId:
      in: path
      name: structId
      description: ID of structure that should be edited
      required: true
      schema:
        $ref: '#/components/schemas/UUID'
  schemas:
    UUID:
      type: string
      format: uuid
      example: 9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d
      minLength: 36
      maxLength: 36
    GroupInfo:
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          example: Good friends
          maxLength: 30
          minLength: 3
        inviteCode:
          type: string
          example: O92UAMEsSXsSs1X
      required:
        - group
        - name
        - inviteCode
    UserInfo:
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          example: Vlad
          maxLength: 30
          minLength: 3
        isAdmin:
          type: boolean
          example: true
    UserGeolocationOutput:
      required:
        - user
        - latitude
        - longitude
      properties:
        user:
          $ref: '#/components/schemas/UUID'
        latitude:
          type: number
          default: 0
        longitude:
          type: number
          default: 0
    
    GroupCreationInput:
      properties:
        name:
          type: string
          example: Good friends
          maxLength: 30
          minLength: 3
        passcode:
          type: string
          example: qwerty
          minLength: 1
          maxLength: 40
      required:
        - name
        - passcode

    GeoStruct:
      description: Custom GeoJSON object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        user:
          $ref: '#/components/schemas/UUID'
        fields:
          $ref: '#/components/schemas/StructFields'
        struct:
          $ref: '#/components/schemas/FeatureCollection'
      required:
        - id
        - user
        - struct
    StructFields:
      type: object
      description: >
        Property of structure that contains object with any fields user
        want to add with any type of data
      example: { checkWeather: true, hidden: false }
    # GeoJSON spec taken from: https://app.swaggerhub.com/apis/OlivierMartineau/GeoJSON/1.0.0
    GeoJsonObject:
      description: >
        GeoJSon object

        The coordinate reference system for all GeoJSON coordinates is a
        geographic coordinate reference system, using the World Geodetic System
        1984 (WGS 84) datum, with longitude and latitude units of decimal
        degrees.
        This is equivalent to the coordinate reference system identified by the
        Open Geospatial Consortium (OGC) URN
        An OPTIONAL third-position element SHALL be the height in meters above
        or below the WGS 84 reference ellipsoid.
        In the absence of elevation values, applications sensitive to height or
        depth SHOULD interpret positions as being at local ground or sea level.
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3'
      type: object
      properties:
        'type':
          type: string
          enum:
            - Feature
            - FeatureCollection
            - Point
            - MultiPoint
            - LineString
            - MultiLineString
            - Polygon
            - MultiPolygon
            - GeometryCollection
        'bbox':
          description: >
            A GeoJSON object MAY have a member named "bbox" to include
            information on the coordinate range for its Geometries, Features, or
            FeatureCollections. The value of the bbox member MUST be an array of
            length 2*n where n is the number of dimensions represented in the
            contained geometries, with all axes of the most southwesterly point
            followed by all axes of the more northeasterly point. The axes order
            of a bbox follows the axes order of geometries.
          type: array
          items:
            type: number
      required:
        - type
      discriminator:
        propertyName: type
    Geometry:
      description: >
        Abstract type for all GeoJSon object except Feature and
        FeatureCollection
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3'
      allOf:
        - $ref: '#/components/schemas/GeoJsonObject'
        - type: object
          properties:
            'type':
              type: string
              enum:
                - Point
                - MultiPoint
                - LineString
                - MultiLineString
                - Polygon
                - MultiPolygon
                - GeometryCollection
          required:
            - type
          discriminator:
            propertyName: type
    GeometryElement:
      description: >
        Abstract type for all GeoJSon 'Geometry' object the type of which is not
        'GeometryCollection'
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3'
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          properties:
            'type':
              type: string
              enum:
                - Point
                - MultiPoint
                - LineString
                - MultiLineString
                - Polygon
                - MultiPolygon
          required:
            - type
          discriminator:
            propertyName: type
    Feature:
      description: GeoJSon 'Feature' object
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.2'
      allOf:
        - $ref: '#/components/schemas/GeoJsonObject'
        - type: object
          required:
            - geometry
            - properties
          properties:
            'geometry':
              allOf:
                - nullable: true
                - $ref: '#/components/schemas/Geometry'
            'properties':
              type: object
              nullable: true
    FeatureCollection:
      description: GeoJSon 'FeatureCollection' object
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.3'
      allOf:
        - $ref: '#/components/schemas/GeoJsonObject'
        - type: object
          required:
            - features
          properties:
            'features':
              type: array
              items:
                $ref: '#/components/schemas/Feature'
    Position:
      description: >
        GeoJSon fundamental geometry construct.

        A position is an array of numbers. There MUST be two or more elements.
        The first two elements are longitude and latitude, or easting and
        northing, precisely in that order and using decimal numbers.
        Altitude or elevation MAY be included as an optional third element.

        Implementations SHOULD NOT extend positions beyond three elements
        because the semantics of extra elements are unspecified and ambiguous.
        Historically, some implementations have used a fourth element to carry
        a linear referencing measure (sometimes denoted as "M") or a numerical
        timestamp, but in most situations a parser will not be able to properly
        interpret these values. The interpretation and meaning of additional
        elements is beyond the scope of this specification, and additional
        elements MAY be ignored by parsers.
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.1'
      type: array
      minItems: 2
      maxItems: 3
      items:
        type: number
    LineStringCoordinates:
      description: >
        GeoJSon fundamental geometry construct, array of two or more positions.
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.4'
      type: array
      items:
        $ref: '#/components/schemas/Position'
      minItems: 2
    LinearRing:
      description: >
        A linear ring is a closed LineString with four or more positions.

        The first and last positions are equivalent, and they MUST contain
        identical values; their representation SHOULD also be identical.

        A linear ring is the boundary of a surface or the boundary of a hole in
        a surface.

        A linear ring MUST follow the right-hand rule with respect to the area
        it bounds, i.e., exterior rings are counterclockwise, and holes are
        clockwise.
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.6'
      type: array
      items:
        $ref: '#/components/schemas/Position'
      minItems: 4
    Point:
      description: GeoJSon geometry
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.2'
      allOf:
        - $ref: '#/components/schemas/GeometryElement'
        - type: object
          required:
            - type
            - coordinates
          properties:
            'type':
              type: 'string'
              enum: [Point]
            'coordinates':
              $ref: '#/components/schemas/Position'
    MultiPoint:
      description: GeoJSon geometry
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.3'
      allOf:
        - $ref: '#/components/schemas/GeometryElement'
        - type: object
          required:
            - coordinates
          properties:
            'coordinates':
              type: array
              items:
                $ref: '#/components/schemas/Position'
    LineString:
      description: GeoJSon geometry
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.4'
      allOf:
        - $ref: '#/components/schemas/GeometryElement'
        - type: object
          required:
            - coordinates
          properties:
            'coordinates':
              $ref: '#/components/schemas/LineStringCoordinates'
    MultiLineString:
      description: GeoJSon geometry
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.5'
      allOf:
        - $ref: '#/components/schemas/GeometryElement'
        - type: object
          required:
            - coordinates
          properties:
            'coordinates':
              type: array
              items:
                $ref: '#/components/schemas/LineStringCoordinates'
    Polygon:
      description: GeoJSon geometry
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.6'
      allOf:
        - $ref: '#/components/schemas/GeometryElement'
        - type: object
          required:
            - coordinates
          properties:
            'coordinates':
              type: array
              items:
                $ref: '#/components/schemas/LinearRing'
    MultiPolygon:
      description: GeoJSon geometry
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.7'
      allOf:
        - $ref: '#/components/schemas/GeometryElement'
        - type: object
          required:
            - coordinates
          properties:
            'coordinates':
              type: array
              items:
                type: array
                items:
                  $ref: '#/components/schemas/LinearRing'
    GeometryCollection:
      type: object
      description: >
        GeoJSon geometry collection

        GeometryCollections composed of a single part or a number of parts of a
        single type SHOULD be avoided when that single part or a single object
        of multipart type (MultiPoint, MultiLineString, or MultiPolygon) could
        be used instead.
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.8'
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          required:
            - geometries
          properties:
            'geometries':
              type: array
              items:
                $ref: '#/components/schemas/GeometryElement'
              minItems: 0

  responses:
    Error400ValidationError:
      description: Data that was sent to server has incorrect schema
      content:
        application/json:
          schema:
            properties:
              errorText:
                type: string
                default: Input validation error
              url:
                type: string
              moreInfo:
                type: array
                items:
                  properties:
                    keyword:
                      type: string
                      default: required
                    dataPath:
                      type: string
                    schemaPath:
                      type: string
                      default: '#/required'
                    params:
                      type: object
                      example: { 'missingProperty': 'name' }
                    message:
                      type: string
                      example: should have required property 'name'
    Error401AuthError:
      description: No token was specified or token is incorrect
      content:
        application/json:
          schema:
            properties:
              errorText:
                type: string
                default: Invalid token
              url:
                type: string
    Error403NoPermissionsError:
      description: Token is ok, but user has no permissions to complete request
      content:
        application/json:
          schema:
            properties:
              errorText:
                type: string
                default: Insufficient permissions
              url:
                type: string
    Error404NotFoundGroupOrUser:
      description: Specified group or user was not found
      content:
        application/json:
          schema:
            properties:
              errorText:
                type: string
                default: No such group found or user was kicked
              url:
                type: string
    Error404NotFoundStructure:
      description: Specified structure was not found
      content:
        application/json:
          schema:
            properties:
              errorText:
                type: string
                default: No such structure found
              url:
                type: string
    Error500InternalServerError:
      description: An unexpected server error occured
      content:
        application/json:
          schema:
            properties:
              errorText:
                type: string
              url:
                type: string
